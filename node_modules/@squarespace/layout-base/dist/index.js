'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _freeze = require('babel-runtime/core-js/object/freeze');

var _freeze2 = _interopRequireDefault(_freeze);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debounce = require('lodash/debounce');

var DEFAULTS = {
  resizeHandler: true,
  resizeDebounceTime: 250,
  resizeMaxWait: 2500
};

/**
 * @class  TemplateLayout
 * @description  A base module class for building Squarespace layouts
 *
 * @param  {HTMLElement} rootNode  the dom node to instantiate layout on
 * @param  {Object} config  config options
 */

var TemplateLayout = function () {
  function TemplateLayout(rootNode) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck3.default)(this, TemplateLayout);

    // root node
    if (rootNode.nodeType !== 1) {
      throw new Error('rootNode must be a DOM Node!');
    }
    this.rootNode = rootNode;

    // rootNode's document/window
    this.document = this.rootNode.ownerDocument;
    this.window = this.document.defaultView;

    // config
    var _config = DEFAULTS;
    Object.defineProperty(this, 'config', {
      configurable: false,
      enumerable: true,
      get: function get() {
        return _config;
      },
      set: function set(obj) {
        _config = (0, _assign2.default)({}, _config, obj);
        (0, _freeze2.default)(_config);
      }
    });
    this.config = config;

    // child nodes
    this.childNodes = [];
    if (this.config.childSelector) {
      try {
        var nodes = this.rootNode.querySelectorAll(this.config.childSelector);
        this.childNodes = (0, _from2.default)(nodes);
      } catch (e) {
        throw new Error('childNode error: ' + e);
      }
    }

    // resize handler
    if (this.config.resizeHandler) {
      this._boundResize = this._handleResize.bind(this);
      this._createResizeListeners();
    }

    // status
    this.hasRunInitialLayout = false;
  }

  /**
   * Creates debounced listeners for:
   *   `config.beforeResize` : `debounce(fn, leading: true, trailing: false)`
   *   `config.afterResize`  : `debounce(fn, leading: false, trailing: true)`
   */


  (0, _createClass3.default)(TemplateLayout, [{
    key: '_createResizeListeners',
    value: function _createResizeListeners() {
      var _this = this;

      var beforeResize = function beforeResize() {
        if (typeof _this.beforeResize === 'function') {
          _this.beforeResize();
        }
        if (typeof _this.config.beforeResize === 'function') {
          _this.config.beforeResize(_this.layout.bind(_this));
        }
      };
      var afterResize = function afterResize() {
        if (typeof _this.afterResize === 'function') {
          _this.afterResize();
        } else {
          _this.layout();
        }
        if (typeof _this.config.afterResize === 'function') {
          _this.config.afterResize(_this.layout.bind(_this));
        }
      };
      this._boundBeforeResize = debounce(beforeResize, this.config.resizeDebounceTime, {
        leading: true,
        trailing: false
      });
      this._boundAfterResize = debounce(afterResize, this.config.resizeDebounceTime, {
        maxWait: this.config.resizeMaxWait,
        leading: false,
        trailing: true
      });
    }

    /**
     * Executes `config.beforeResize` on first resize event. Executes
     * `config.afterResize`, `config.resizeDebounceTime`ms after last resize event
     */

  }, {
    key: '_handleResize',
    value: function _handleResize() {
      if (this._boundBeforeResize) {
        this._boundBeforeResize();
      }
      if (this._boundAfterResize) {
        this._boundAfterResize();
      }
    }

    /**
     * Execute`config.beforeLayout` before each layout cycle
     * @param  {object} config object with new/updated values
     */

  }, {
    key: 'beforeLayout',
    value: function beforeLayout(config) {
      this.config = config;
      if (!this.hasRunInitialLayout) {
        this.beforeInitialLayout();
      }
      if (typeof this.config.beforeLayout === 'function') {
        this.config.beforeLayout.apply(this);
      }
    }

    /**
     * Executes `config.beforeInitialLayout` before initial layout cycle
     */

  }, {
    key: 'beforeInitialLayout',
    value: function beforeInitialLayout() {
      if (typeof this.config.beforeInitialLayout === 'function') {
        this.config.beforeInitialLayout.apply(this);
      }
    }

    /**
     * Executes `config.afterLayout` after each layout cycle
     */

  }, {
    key: 'afterLayout',
    value: function afterLayout() {
      if (!this.hasRunInitialLayout) {
        this.afterInitialLayout();
        this.hasRunInitialLayout = true;
      }
      if (typeof this.config.afterLayout === 'function') {
        this.config.afterLayout.apply(this);
      }
    }

    /**
     * Executes `config.afterInitialLayout` after initial layout cycle
     */

  }, {
    key: 'afterInitialLayout',
    value: function afterInitialLayout() {
      if (typeof this.config.afterInitialLayout === 'function') {
        this.config.afterInitialLayout.apply(this);
      }
      if (this.config.resizeHandler) {
        this.window.addEventListener('resize', this._boundResize);
      }
    }

    /**
     * Executes `config.beforeDestroy` before destroying layout
     */

  }, {
    key: 'beforeDestroy',
    value: function beforeDestroy() {
      if (this.config.resizeHandler) {
        this.window.removeEventListener('resize', this._boundResize);
      }
      if (typeof this.config.beforeDestroy === 'function') {
        this.config.beforeDestroy.apply(this);
      }
    }

    /**
     * Executes `config.afterDestroy` after destroying layout
     */

  }, {
    key: 'afterDestroy',
    value: function afterDestroy() {
      if (typeof this.config.afterDestroy === 'function') {
        this.config.afterDestroy.apply(this);
      }
    }
  }]);
  return TemplateLayout;
}();

exports.default = TemplateLayout;
module.exports = exports['default'];
