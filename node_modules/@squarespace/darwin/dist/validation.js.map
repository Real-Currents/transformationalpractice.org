{"version":3,"sources":["../src/validation.js"],"names":["checkForMutationObserver","MutationObserver","window","WebKitMutationObserver","MozMutationObserver","validateCallback","callback","errorMessage","Error"],"mappings":";;;;;AAAA;;;;;;AAMO,IAAMA,8DAA2B,SAA3BA,wBAA2B,GAAM;AAC5C,MAAMC,mBACJC,OAAOD,gBAAP,IACAC,OAAOC,sBADP,IAEAD,OAAOE,mBAHT;;AAKA,SAAOH,gBAAP;AACD,CAPM;;AASP;;;;;;AAMO,IAAMI,8CAAmB,SAAnBA,gBAAmB,CAACC,QAAD,EAAc;AAC5C,MAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,WAAOA,QAAP;AACD;;AAED,MAAMC,eAAe,4CACnB,oDADF;AAEA,QAAM,IAAIC,KAAJ,CAAUD,YAAV,CAAN;AACD,CARM","file":"validation.js","sourcesContent":["/**\n * Checks for the MutationObserver API on the window object. If it's not there\n * (including in prefixed forms), error out. Otherwise, return a reference to it.\n *\n * @return {MutationObserver}   The MutationObserver\n */\nexport const checkForMutationObserver = () => {\n  const MutationObserver =\n    window.MutationObserver ||\n    window.WebKitMutationObserver ||\n    window.MozMutationObserver;\n\n  return MutationObserver;\n};\n\n/**\n * Ensures that a given callback is a valid function, erroring out otherwise.\n *\n * @param  {*}  callback    Callback from Darwin constructor\n * @return {Function}       The callback if it's a valid function\n */\nexport const validateCallback = (callback) => {\n  if (typeof callback === 'function') {\n    return callback;\n  }\n\n  const errorMessage = 'Darwin must receive a callback function' +\n    ', or there is nothing to run when mutations occur.';\n  throw new Error(errorMessage);\n};"]}