{"version":3,"sources":["../src/index.js"],"names":["mutationObserverUnsupportedMessage","Darwin","callback","targets","MutationObserver","console","error","observer","createObserver","observeTargets","disconnect","document","removeEventListener","reactToMutations","mutations","evaluateMutations","forEach","sel","querySelectorAll","target","observe","childList","subtree","attributes","readyState","addEventListener","timer","clearTimeout","setTimeout"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AAEA,IAAMA,qCAAqC,gDAA3C;;AAEA;;;;;;IAKMC,M;AACJ;;;;;AAKA,wBAGG;AAAA,QAFDC,QAEC,QAFDA,QAEC;AAAA,4BADDC,OACC;AAAA,QADDA,OACC,gCADS,EACT;AAAA;;AACD,SAAKC,gBAAL,GAAwB,2CAAxB;;AAEA,QAAI,CAAC,KAAKA,gBAAV,EAA4B;AAC1BC,cAAQC,KAAR,CAAcN,kCAAd;AACA;AACD;;AAED,SAAKE,QAAL,GAAgB,kCAAiBA,QAAjB,CAAhB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACD;;AAED;;;;;;;;;2BAKO;AACL,UAAI,CAAC,KAAKC,gBAAV,EAA4B;AAC1BC,gBAAQC,KAAR,CAAcN,kCAAd;AACA;AACD;AACD,WAAKO,QAAL,GAAgB,KAAKC,cAAL,EAAhB;AACA,WAAKC,cAAL;AACD;;AAED;;;;;;;;;8BAMU;AACR,UAAI,CAAC,KAAKL,gBAAV,EAA4B;AAC1BC,gBAAQC,KAAR,CAAcN,kCAAd;AACA;AACD;AACD,WAAKO,QAAL,CAAcG,UAAd;AACA,WAAKH,QAAL,GAAgB,IAAhB;AACAI,eAASC,mBAAT,CAA6B,kBAA7B,EAAiD,KAAKC,gBAAtD;AACD;;AAED;;;;;;;;;;qCAOiB;AAAA;;AACf,aAAO,IAAI,KAAKT,gBAAT,CAA0B,UAACU,SAAD,EAAe;AAC9C,cAAKC,iBAAL,CAAuBD,SAAvB;AACD,OAFM,CAAP;AAGD;;AAED;;;;;;;;qCAKiB;AAAA;;AACf,WAAKX,OAAL,CAAaa,OAAb,CAAqB,UAACC,GAAD,EAAS;AAC5B,4BAAWN,SAASO,gBAAT,CAA0BD,GAA1B,CAAX,EAA2CD,OAA3C,CAAmD,UAACG,MAAD,EAAY;AAC7D,iBAAKZ,QAAL,CAAca,OAAd,CAAsBD,MAAtB,EAA8B;AAC5BE,uBAAW,IADiB;AAE5BC,qBAAS,IAFmB;AAG5BC,wBAAY;AAHgB,WAA9B;AAKD,SAND;AAOD,OARD;AASD;;AAED;;;;;;;;;;;;sCASkBT,S,EAAW;AAC3B,UAAI,CAACA,SAAL,EAAgB;AACd;AACD;;AAED,UAAIH,SAASa,UAAT,KAAwB,SAA5B,EAAuC;AACrCb,iBAASc,gBAAT,CAA0B,kBAA1B,EAA8C,KAAKZ,gBAAnD;AACD,OAFD,MAEO;AACL,aAAKA,gBAAL;AACD;AACF;;AAED;;;;;;;;;;uCAOmB;AACjB,UAAI,KAAKa,KAAT,EAAgB;AACdC,qBAAa,KAAKD,KAAlB;AACD;AACD,WAAKA,KAAL,GAAaE,WAAW,KAAK1B,QAAhB,EAA0B,GAA1B,CAAb;AACD;;;;;kBAKYD,M","file":"index.js","sourcesContent":["import { checkForMutationObserver, validateCallback } from './validation';\n\nconst mutationObserverUnsupportedMessage = 'This browser does not support MutationObserver';\n\n/**\n * Passthrough implementation of MutationObserver designed to make it easier to\n * use, handling DOM querying, browser compatibility, and other stuff like that\n * for you.\n */\nclass Darwin {\n  /**\n   * @param  {Function} options.callback    Callback function to run when\n   *                                        mutations occur\n   * @param  {Array}    [options.targets]     Selectors of targets to observe\n   */\n  constructor({\n    callback,\n    targets = []\n  }) {\n    this.MutationObserver = checkForMutationObserver();\n\n    if (!this.MutationObserver) {\n      console.error(mutationObserverUnsupportedMessage);\n      return;\n    }\n\n    this.callback = validateCallback(callback);\n    this.targets = targets;\n  }\n\n  /**\n   * Creates a MutationObserver, and observes stored targets.\n   *\n   * @public\n   */\n  init() {\n    if (!this.MutationObserver) {\n      console.error(mutationObserverUnsupportedMessage);\n      return;\n    }\n    this.observer = this.createObserver();\n    this.observeTargets();\n  }\n\n  /**\n   * Disconnects the MutationObserver, nulls it out, and removes the\n   * DOMContentLoaded event listener added by evaluateMutations.\n   *\n   * @public\n   */\n  destroy() {\n    if (!this.MutationObserver) {\n      console.error(mutationObserverUnsupportedMessage);\n      return;\n    }\n    this.observer.disconnect();\n    this.observer = null;\n    document.removeEventListener('DOMContentLoaded', this.reactToMutations);\n  }\n\n  /**\n   * Creates a new instance of MutationObserver using the correct API, with\n   * this.evaluateMutations as the callback.\n   *\n   * @private\n   * @return {MutationObserver}   Created instance of MutationObserver\n   */\n  createObserver() {\n    return new this.MutationObserver((mutations) => {\n      this.evaluateMutations(mutations);\n    });\n  }\n\n  /**\n   * Loops through targets and instructs the created observer to observe them.\n   *\n   * @private\n   */\n  observeTargets() {\n    this.targets.forEach((sel) => {\n      Array.from(document.querySelectorAll(sel)).forEach((target) => {\n        this.observer.observe(target, {\n          childList: true,\n          subtree: true,\n          attributes: true\n        });\n      });\n    });\n  }\n\n  /**\n   * MutationObserver callback. Given mutations that are observed, evaluate them\n   * to see if they are the right type, and if so, react to them in the proper\n   * manner. Has logic to protect against mutations observed before\n   * DOMContentLoaded occurs.\n   *\n   * @private\n   * @param  {Array} mutations   An array of MutationRecord objects\n   */\n  evaluateMutations(mutations) {\n    if (!mutations) {\n      return;\n    }\n\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', this.reactToMutations);\n    } else {\n      this.reactToMutations();\n    }\n  }\n\n  /**\n   * Upon mutation, call the callback that's passed in. Batches changes with the\n   * setTimeout.\n   *\n   * @private\n   * @method reactToMutations\n   */\n  reactToMutations() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n    this.timer = setTimeout(this.callback, 150);\n  }\n\n}\n\n\nexport default Darwin;"]}