'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Given a setting string for this ancillary base, validate and parse the
 * string into an object with an elementName and containerName.
 *
 * @param {String} string Position string to be parsed
 * @return {Object}       An object with containerName and elementName
 * @private
 */
var _parse = function _parse(string, baseName) {
  var re = new RegExp('ancillary-' + '|' + baseName + '-', 'gi');
  var arr = string.replace(re, '').toLowerCase().split(/-position-?/);
  if (arr.length === 2) {
    return {
      elementName: arr[0],
      containerName: arr[1]
    };
  }
  return null;
};

/**
 * Match strings in className of <body> that may be valid positions.
 * Then parse them and return object with positions.
 *
 * @return {Object}    An object with all positions, indexed by element name
 * @private
 */
var getPositions = function getPositions(baseName) {
  var re = new RegExp('ancillary-' + baseName + '-(.{1,20})-position-(.+?)(?=(\\s|$))', 'gi');
  var bodyClasses = document.body.className.match(re);
  var positionObject = bodyClasses.reduce(function (acc, className) {
    var info = _parse(className, baseName);
    acc[info.elementName] = info.containerName;
    return acc;
  }, {});
  return positionObject;
};

/**
 * Grab all nc-elements from the DOM, and store in object with element names
 * as keys for accessibility purposes.
 *
 * @return {Object}   An object with all elements, indexed by element name
 * @private
 */
var findElements = function findElements(base) {
  var elementNodes = (0, _from2.default)(base.querySelectorAll('[data-nc-element]'));
  var elementObject = elementNodes.reduce(function (acc, elementNode) {
    var elementName = elementNode.getAttribute('data-nc-element');
    if (elementName.length > 0) {
      acc[elementName] = elementNode;
    }
    return acc;
  }, {});
  return elementObject;
};

/**
 * Grab all nc-containers from the DOM, store in object with container names
 * as keys for accessibility purposes. Elements in the container are also
 * stored as a nodelist.
 *
 * @return {Object}   An object with all containers, indexed by container name
 * @private
 */
var findContainers = function findContainers(base) {
  var containerNodes = (0, _from2.default)(base.querySelectorAll('[data-nc-container]'));
  var containerObject = containerNodes.reduce(function (acc, containerNode) {
    var containerName = containerNode.getAttribute('data-nc-container');
    if (containerName.length > 0) {
      acc[containerName] = containerNode;
    }
    return acc;
  }, {});
  return containerObject;
};

var Ancillary = function () {

  /**
   * Construct an instance of Ancillary in the DOM node provided.
   *
   * @param  {Object} base  Ancillary base DOM Node
   */
  function Ancillary(base) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck3.default)(this, Ancillary);

    this.baseName = base.getAttribute('data-nc-base').toLowerCase();
    this.base = base;

    this.config = config;

    this.elements = findElements(this.base);
    this.containers = findContainers(this.base);
  }

  /**
   * Get positions, then loop through this.elements and call syncElement
   * on each one.
   *
   * @public
   */


  (0, _createClass3.default)(Ancillary, [{
    key: 'sync',
    value: function sync() {
      this.positions = getPositions(this.baseName);
      for (var elementName in this.elements) {
        this.syncElement(elementName, this.positions[elementName]);
      }
    }

    /**
     * Given an element name and container name, insert the element into the
     * proper container. If no element is provided, nothing happens. If no
     * container is provided, remove the element from the DOM.
     *
     * @param {String} elementName    Name of the element
     * @param {String} containerName  Name of the container in which the element is positioned
     * @public
     */

  }, {
    key: 'syncElement',
    value: function syncElement(elementName, containerName) {
      var element = this.elements[elementName];
      var container = this.containers[containerName];
      if (!element && this.config.debug) {
        console.error('Element "' + elementName + '"" not found.');
      } else if (container) {
        container.appendChild(element);
      } else if (element.parentNode) {
        element.parentNode.removeChild(element);
        if (this.config.debug) {
          console.warn('Container "' + containerName + '" not found. Removing element "' + elementName + '".');
        }
      }
    }

    /**
     * Static method that calls parse method above.
     *
     * @param {String} string Position string to be parsed
     * @return {Object}       An object with containerName and elementName
     * @public
     */

  }], [{
    key: 'parse',
    value: function parse(string) {
      return _parse(string, this.baseName);
    }
  }]);
  return Ancillary;
}();

exports.default = Ancillary;
module.exports = exports['default'];