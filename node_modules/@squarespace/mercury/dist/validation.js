'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateOnLoadDelay = exports.validateOptionalParam = exports.isValidUpdateMatrix = undefined;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Given an update matrix (array of update configs for Mercury constructor),
 * loop through and figure out whether the matrix is valid or not.
 *
 * @param  {Array} matrix   Update matrix
 * @return {Boolean}        Whether the matrix is valid
 */
var isValidUpdateMatrix = exports.isValidUpdateMatrix = function isValidUpdateMatrix(matrix) {
  if (!Array.isArray(matrix)) {
    console.error('updateMatrix is not an Array');
    return false;
  }
  return matrix.every(function (updateConfig) {
    var selector = updateConfig.selector;
    var updateHTML = updateConfig.updateHTML;
    var updateAttrs = updateConfig.updateAttrs;
    var updateScript = updateConfig.updateScript;

    if (typeof selector !== 'string') {
      console.error(selector + ' is not a valid selector.');
      return false;
    }
    var nonBooleanUpdateHTML = typeof updateHTML !== 'undefined' && typeof updateHTML !== 'boolean';
    var nonBooleanUpdateAttrs = typeof updateAttrs !== 'undefined' && typeof updateAttrs !== 'boolean';
    var nonBooleanUpdateScript = typeof updateScript !== 'undefined' && typeof updateScript !== 'boolean';
    if (nonBooleanUpdateHTML || nonBooleanUpdateAttrs || nonBooleanUpdateScript) {
      console.error('Non-boolean updateHTML, updateAttrs, or updateScript provided for selector ' + selector + '.');
      return false;
    }
    return true;
  });
};

/**
 * Given an optional param, validate it against a type (using typeof), return
 * the fallback if param is invalid or not provided, and return the param if
 * it's valid.
 *
 * @param  {*}      param     Param to validate
 * @param  {String} type      Expected type of param
 * @param  {*}      fallback  Param to fall back to if param is invalid
 * @return {*}                Param or fallback
 */
var validateOptionalParam = exports.validateOptionalParam = function validateOptionalParam(param, type, fallback) {
  if (param === undefined) {
    return fallback;
  }
  if ((typeof param === 'undefined' ? 'undefined' : (0, _typeof3.default)(param)) !== type) {
    console.error(param + ' is not a ' + type + '.');
    return fallback;
  }
  return param;
};

/**
 * Given a delayTime, validate it against a number type (using typeof),
 * return 0 if delayTime is invalid or not provided, and return the delayTime
 * if it's valid.
 *
 * @param  {Number}   delayTime   delayTime to validate
 * @return {Number}               0 or delayTime
 */
var validateOnLoadDelay = exports.validateOnLoadDelay = function validateOnLoadDelay(delayTime) {
  if (delayTime === undefined) {
    return 0;
  }
  if (typeof delayTime !== 'number') {
    console.error(delayTime + ' is not a number.');
    return 0;
  }
  if (delayTime < 0) {
    console.error(delayTime + ' is less than 0.');
    return 0;
  }
  return delayTime;
};